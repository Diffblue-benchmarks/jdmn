package com.gs.dmn.feel.analysis.semantics.type;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

/**
 * Unit tests for com.gs.dmn.feel.analysis.semantics.type.TupleType
 *
 * @author Diffblue JCover
 */

public class TupleTypeTest {

    @Test(timeout=10000)
    public void conformsTo1() {
        Type other = mock(Type.class);
        assertThat(new TupleType().conformsTo(other), is(false));
    }

    @Test(timeout=10000)
    public void conformsTo2() {
        Type other = mock(Type.class);
        assertThat(new TupleType(new ArrayList<Type>()).conformsTo(other), is(false));
    }

    @Test(timeout=10000)
    public void conformsTo3() {
        Type other = mock(Type.class);
        assertThat(new TupleType(null).conformsTo(other), is(false));
    }

    @Test(timeout=10000)
    public void equivalentToReturnsFalse() {
        Type other = mock(Type.class);
        assertThat(new TupleType().equivalentTo(other), is(false));
    }

    @Test(timeout=10000)
    public void getTypesReturnsEmpty() {
        TupleType tupleType = new TupleType();
        List<Type> result = tupleType.getTypes();
        assertTrue(result.isEmpty());
        assertThat(tupleType.getTypes(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void isValidReturnsFalse() {
        assertThat(new TupleType().isValid(), is(false));
    }

    @Test(timeout=10000)
    public void isValidReturnsTrue() {
        List<Type> types = new ArrayList<Type>();
        Type type = mock(Type.class);
        when(type.isValid())
            .thenReturn(false)
            .thenReturn(true)
            .thenReturn(false);
        ((ArrayList<Type>)types).add(type);
        assertThat(new TupleType(types).isValid(), is(true));
    }

    @Test(timeout=10000)
    public void testequals() {
        assertThat(new TupleType().equals("foo"), is(false));
        assertThat(new TupleType().equals(null), is(false));
    }

    @Test(timeout=10000)
    public void validate() {
        List<Type> types = new ArrayList<Type>();
        Type type = mock(Type.class);
        when(type.isValid())
            .thenReturn(true)
            .thenReturn(true)
            .thenReturn(false);
        ((ArrayList<Type>)types).add(type);
        TupleType tupleType = new TupleType(types);
        tupleType.validate();
        assertThat(tupleType.isValid(), is(false));
    }
}
