package com.gs.dmn.feel.analysis.semantics.type;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.Test;

/**
 * Unit tests for com.gs.dmn.feel.analysis.semantics.type.RangeType
 *
 * @author Diffblue JCover
 */

public class RangeTypeTest {

    @Test(timeout=10000)
    public void conformsTo1() {
        Type other = mock(Type.class);
        assertThat(new RangeType().conformsTo(other), is(false));
    }

    @Test(timeout=10000)
    public void conformsTo2() {
        Type other = mock(Type.class);
        assertThat(new RangeType(null).conformsTo(other), is(false));
    }

    @Test(timeout=10000)
    public void equivalentToReturnsFalse() {
        Type other = mock(Type.class);
        assertThat(new RangeType().equivalentTo(other), is(false));
    }

    @Test(timeout=10000)
    public void getRangeType() {
        RangeType rangeType = new RangeType();
        Type result = rangeType.getRangeType();
        assertThat(result.isValid(), is(true));
        assertThat(rangeType.getRangeType(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void isValidReturnsFalse() {
        Type type = mock(Type.class);
        when(type.isValid())
            .thenReturn(true)
            .thenReturn(false)
            .thenReturn(false);
        RangeType rangeType = new RangeType(type);
        assertThat(rangeType.isValid(), is(false));
        assertThat(rangeType.isValid(), is(false));
    }

    @Test(timeout=10000)
    public void isValidReturnsTrue() {
        assertThat(new RangeType().isValid(), is(true));
    }

    @Test(timeout=10000)
    public void testequals() {
        assertThat(new RangeType().equals("foo"), is(false));
        assertThat(new RangeType().equals(null), is(false));
    }

    @Test(timeout=10000)
    public void validate() {
        Type type = mock(Type.class);
        when(type.isValid())
            .thenReturn(true)
            .thenReturn(true)
            .thenReturn(false);
        RangeType rangeType = new RangeType(type);
        rangeType.validate();
        assertThat(rangeType.isValid(), is(false));
    }
}
