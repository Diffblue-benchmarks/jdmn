package com.gs.dmn.feel.analysis.semantics.type;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.nullValue;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.junit.Test;

/**
 * Unit tests for com.gs.dmn.feel.analysis.semantics.type.ContextType
 *
 * @author Diffblue JCover
 */

public class ContextTypeTest {

    @Test(timeout=10000)
    public void addMemberAliasesIsEmptyAndNameIsInt() {
        ContextType contextType = new ContextType();
        Type type = mock(Type.class);
        when(type.isValid())
            .thenReturn(false);
        assertThat(contextType.addMember("int", new ArrayList<String>(), type), sameInstance(contextType));
        assertTrue(contextType.getMembers().contains("int"));
    }

    @Test(timeout=10000)
    public void conformsToReturnsFalse() {
        Type other = mock(Type.class);
        assertThat(new ContextType().conformsTo(other), is(false));
    }

    @Test(timeout=10000)
    public void equivalentToReturnsFalse() {
        Type other = mock(Type.class);
        assertThat(new ContextType().equivalentTo(other), is(false));
    }

    @Test(timeout=10000)
    public void getAliasesNameIsIntReturnsEmpty() {
        assertTrue(new ContextType().getAliases("int").isEmpty());
    }

    @Test(timeout=10000)
    public void getMembersReturnsEmpty() {
        ContextType contextType = new ContextType();
        Set<String> result = contextType.getMembers();
        assertTrue(result.isEmpty());
        assertThat(contextType.getMembers(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void getMemberTypeKeyIsGifReturnsNull() {
        assertThat(new ContextType().getMemberType("gif"), is(nullValue()));
    }

    @Test(timeout=10000)
    public void isValid1() {
        assertThat(new ContextType().isValid(), is(false));
    }

    @Test(timeout=10000)
    public void isValid2() {
        Map<String, Type> namedTypes = new HashMap<String, Type>();
        Type x4 = mock(Type.class);
        when(x4.isValid())
            .thenReturn(true)
            .thenReturn(false)
            .thenReturn(false);
        ((HashMap<String, Type>)namedTypes).put("foo", x4);
        ContextType contextType = new ContextType(namedTypes);
        assertThat(contextType.isValid(), is(false));
        assertThat(contextType.isValid(), is(false));
    }

    @Test(timeout=10000)
    public void isValidReturnsTrue() {
        Map<String, Type> namedTypes = new HashMap<String, Type>();
        Type x4 = mock(Type.class);
        when(x4.isValid())
            .thenReturn(false)
            .thenReturn(true)
            .thenReturn(false);
        ((HashMap<String, Type>)namedTypes).put("foo", x4);
        assertThat(new ContextType(namedTypes).isValid(), is(true));
    }

    @Test(timeout=10000)
    public void testequals() {
        assertThat(new ContextType().equals("foo"), is(false));
        assertThat(new ContextType().equals(null), is(false));
    }

    @Test(timeout=10000)
    public void validate() {
        Map<String, Type> namedTypes = new HashMap<String, Type>();
        Type x4 = mock(Type.class);
        when(x4.isValid())
            .thenReturn(true)
            .thenReturn(true)
            .thenReturn(false);
        ((HashMap<String, Type>)namedTypes).put("foo", x4);
        ContextType contextType = new ContextType(namedTypes);
        contextType.validate();
        assertThat(contextType.isValid(), is(false));
    }
}
