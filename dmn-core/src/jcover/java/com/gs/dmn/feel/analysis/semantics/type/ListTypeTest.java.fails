package com.gs.dmn.feel.analysis.semantics.type;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.Test;

/**
 * Unit tests for com.gs.dmn.feel.analysis.semantics.type.ListType
 *
 * @author Diffblue JCover
 */

public class ListTypeTest {

    @Test(timeout=10000)
    public void conformsTo1() {
        Type other = mock(Type.class);
        assertThat(new ListType().conformsTo(other), is(false));
    }

    @Test(timeout=10000)
    public void conformsTo2() {
        Type other = mock(Type.class);
        assertThat(new ListType(null).conformsTo(other), is(false));
    }

    @Test(timeout=10000)
    public void equivalentToReturnsFalse() {
        Type other = mock(Type.class);
        assertThat(new ListType().equivalentTo(other), is(false));
    }

    @Test(timeout=10000)
    public void getElementType() {
        ListType listType = new ListType();
        Type result = listType.getElementType();
        assertThat(result.isValid(), is(true));
        assertThat(listType.getElementType(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void isValidReturnsFalse() {
        Type elementType = mock(Type.class);
        when(elementType.isValid())
            .thenReturn(true)
            .thenReturn(false)
            .thenReturn(false);
        ListType listType = new ListType(elementType);
        assertThat(listType.isValid(), is(false));
        assertThat(listType.isValid(), is(false));
    }

    @Test(timeout=10000)
    public void isValidReturnsTrue() {
        assertThat(new ListType().isValid(), is(true));
    }

    @Test(timeout=10000)
    public void testequals() {
        assertThat(new ListType().equals("foo"), is(false));
        assertThat(new ListType().equals(null), is(false));
    }

    @Test(timeout=10000)
    public void validate() {
        Type elementType = mock(Type.class);
        when(elementType.isValid())
            .thenReturn(true)
            .thenReturn(true)
            .thenReturn(false);
        ListType listType = new ListType(elementType);
        listType.validate();
        assertThat(listType.isValid(), is(false));
    }
}
